import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useAuth } from "@/App";
import { useToast } from "@/components/ui/use-toast";
import { fetchWithAuth } from "@/lib/apiClient";
import { Skeleton } from "./ui/skeleton";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Edit, User, MapPin, Layers, Ruler, Save, X } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { useLanguage } from "./LanguageToggle";

// Based on research of Kerala soil types with Malayalam translations
const keralaSoilTypes = {
  en: [
    "Laterite",
    "Red Soil", 
    "Alluvial Soil",
    "Black Soil",
    "Peat (Kari)",
    "Sandy Soil",
    "Forest Soil",
    "Acid Saline Soil",
    "Coastal Alluvium",
    "Mixed Alluvium",
  ],
  ml: [
    "‡¥≤‡¥æ‡¥±‡µç‡¥±‡¥±‡µà‡¥±‡µç‡¥±‡µç",
    "‡¥ö‡µÅ‡¥µ‡¥®‡µç‡¥® ‡¥Æ‡¥£‡µç‡¥£‡µç",
    "‡¥Ö‡¥≤‡µÇ‡¥µ‡¥ø‡¥Ø‡µΩ ‡¥Æ‡¥£‡µç‡¥£‡µç",
    "‡¥ï‡¥±‡µÅ‡¥§‡µç‡¥§ ‡¥Æ‡¥£‡µç‡¥£‡µç",
    "‡¥™‡µÄ‡¥±‡µç‡¥±‡µç (‡¥ï‡¥æ‡¥∞‡¥ø)",
    "‡¥Æ‡¥£‡µΩ ‡¥Æ‡¥£‡µç‡¥£‡µç",
    "‡¥µ‡¥® ‡¥Æ‡¥£‡µç‡¥£‡µç",
    "‡¥Ü‡¥∏‡¥ø‡¥°‡µç ‡¥∏‡¥≤‡µà‡µª ‡¥Æ‡¥£‡µç‡¥£‡µç",
    "‡¥§‡µÄ‡¥∞‡¥¶‡µá‡¥∂ ‡¥Ö‡¥≤‡µÇ‡¥µ‡¥ø‡¥Ø‡¥Ç",
    "‡¥Æ‡¥ø‡¥∂‡µç‡¥∞ ‡¥Ö‡¥≤‡µÇ‡¥µ‡¥ø‡¥Ø‡¥Ç",
  ]
};

// Mapping for soil type values (always store English values in backend)
const soilTypeMapping: Record<string, string> = {
  "‡¥≤‡¥æ‡¥±‡µç‡¥±‡¥±‡µà‡¥±‡µç‡¥±‡µç": "Laterite",
  "‡¥ö‡µÅ‡¥µ‡¥®‡µç‡¥® ‡¥Æ‡¥£‡µç‡¥£‡µç": "Red Soil",
  "‡¥Ö‡¥≤‡µÇ‡¥µ‡¥ø‡¥Ø‡µΩ ‡¥Æ‡¥£‡µç‡¥£‡µç": "Alluvial Soil",
  "‡¥ï‡¥±‡µÅ‡¥§‡µç‡¥§ ‡¥Æ‡¥£‡µç‡¥£‡µç": "Black Soil",
  "‡¥™‡µÄ‡¥±‡µç‡¥±‡µç (‡¥ï‡¥æ‡¥∞‡¥ø)": "Peat (Kari)",
  "‡¥Æ‡¥£‡µΩ ‡¥Æ‡¥£‡µç‡¥£‡µç": "Sandy Soil",
  "‡¥µ‡¥® ‡¥Æ‡¥£‡µç‡¥£‡µç": "Forest Soil",
  "‡¥Ü‡¥∏‡¥ø‡¥°‡µç ‡¥∏‡¥≤‡µà‡µª ‡¥Æ‡¥£‡µç‡¥£‡µç": "Acid Saline Soil",
  "‡¥§‡µÄ‡¥∞‡¥¶‡µá‡¥∂ ‡¥Ö‡¥≤‡µÇ‡¥µ‡¥ø‡¥Ø‡¥Ç": "Coastal Alluvium",
  "‡¥Æ‡¥ø‡¥∂‡µç‡¥∞ ‡¥Ö‡¥≤‡µÇ‡¥µ‡¥ø‡¥Ø‡¥Ç": "Mixed Alluvium",
};

// Reverse mapping for display (English to Malayalam)
const soilTypeDisplayMapping: Record<string, string> = {
  "Laterite": "‡¥≤‡¥æ‡¥±‡µç‡¥±‡¥±‡µà‡¥±‡µç‡¥±‡µç",
  "Red Soil": "‡¥ö‡µÅ‡¥µ‡¥®‡µç‡¥® ‡¥Æ‡¥£‡µç‡¥£‡µç",
  "Alluvial Soil": "‡¥Ö‡¥≤‡µÇ‡¥µ‡¥ø‡¥Ø‡µΩ ‡¥Æ‡¥£‡µç‡¥£‡µç",
  "Black Soil": "‡¥ï‡¥±‡µÅ‡¥§‡µç‡¥§ ‡¥Æ‡¥£‡µç‡¥£‡µç",
  "Peat (Kari)": "‡¥™‡µÄ‡¥±‡µç‡¥±‡µç (‡¥ï‡¥æ‡¥∞‡¥ø)",
  "Sandy Soil": "‡¥Æ‡¥£‡µΩ ‡¥Æ‡¥£‡µç‡¥£‡µç",
  "Forest Soil": "‡¥µ‡¥® ‡¥Æ‡¥£‡µç‡¥£‡µç",
  "Acid Saline Soil": "‡¥Ü‡¥∏‡¥ø‡¥°‡µç ‡¥∏‡¥≤‡µà‡µª ‡¥Æ‡¥£‡µç‡¥£‡µç",
  "Coastal Alluvium": "‡¥§‡µÄ‡¥∞‡¥¶‡µá‡¥∂ ‡¥Ö‡¥≤‡µÇ‡¥µ‡¥ø‡¥Ø‡¥Ç",
  "Mixed Alluvium": "‡¥Æ‡¥ø‡¥∂‡µç‡¥∞ ‡¥Ö‡¥≤‡µÇ‡¥µ‡¥ø‡¥Ø‡¥Ç",
};

// Kerala districts with Malayalam translations
const keralaDistricts = {
  en: [
    "Thiruvananthapuram",
    "Kollam",
    "Pathanamthitta", 
    "Alappuzha",
    "Kottayam",
    "Idukki",
    "Ernakulam",
    "Thrissur",
    "Palakkad",
    "Malappuram",
    "Kozhikode",
    "Wayanad",
    "Kannur",
    "Kasaragod",
  ],
  ml: [
    "‡¥§‡¥ø‡¥∞‡µÅ‡¥µ‡¥®‡¥®‡µç‡¥§‡¥™‡µÅ‡¥∞‡¥Ç",
    "‡¥ï‡µä‡¥≤‡µç‡¥≤‡¥Ç",
    "‡¥™‡¥§‡µç‡¥§‡¥®‡¥Ç‡¥§‡¥ø‡¥ü‡µç‡¥ü",
    "‡¥Ü‡¥≤‡¥™‡µç‡¥™‡µÅ‡¥¥",
    "‡¥ï‡µã‡¥ü‡µç‡¥ü‡¥Ø‡¥Ç",
    "‡¥á‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥ø",
    "‡¥é‡¥±‡¥£‡¥æ‡¥ï‡µÅ‡¥≥‡¥Ç",
    "‡¥§‡µÉ‡¥∂‡µç‡¥∂‡µÇ‡µº",
    "‡¥™‡¥æ‡¥≤‡¥ï‡µç‡¥ï‡¥æ‡¥ü‡µç",
    "‡¥Æ‡¥≤‡¥™‡µç‡¥™‡µÅ‡¥±‡¥Ç",
    "‡¥ï‡µã‡¥¥‡¥ø‡¥ï‡µç‡¥ï‡µã‡¥ü‡µç",
    "‡¥µ‡¥Ø‡¥®‡¥æ‡¥ü‡µç",
    "‡¥ï‡¥£‡µç‡¥£‡µÇ‡µº",
    "‡¥ï‡¥æ‡¥∏‡µº‡¥ï‡µã‡¥ü‡µç",
  ]
};

// District mapping (always store English values in backend)
const districtMapping: Record<string, string> = {
  "‡¥§‡¥ø‡¥∞‡µÅ‡¥µ‡¥®‡¥®‡µç‡¥§‡¥™‡µÅ‡¥∞‡¥Ç": "Thiruvananthapuram",
  "‡¥ï‡µä‡¥≤‡µç‡¥≤‡¥Ç": "Kollam",
  "‡¥™‡¥§‡µç‡¥§‡¥®‡¥Ç‡¥§‡¥ø‡¥ü‡µç‡¥ü": "Pathanamthitta",
  "‡¥Ü‡¥≤‡¥™‡µç‡¥™‡µÅ‡¥¥": "Alappuzha",
  "‡¥ï‡µã‡¥ü‡µç‡¥ü‡¥Ø‡¥Ç": "Kottayam",
  "‡¥á‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥ø": "Idukki",
  "‡¥é‡¥±‡¥£‡¥æ‡¥ï‡µÅ‡¥≥‡¥Ç": "Ernakulam",
  "‡¥§‡µÉ‡¥∂‡µç‡¥∂‡µÇ‡µº": "Thrissur",
  "‡¥™‡¥æ‡¥≤‡¥ï‡µç‡¥ï‡¥æ‡¥ü‡µç": "Palakkad",
  "‡¥Æ‡¥≤‡¥™‡µç‡¥™‡µÅ‡¥±‡¥Ç": "Malappuram",
  "‡¥ï‡µã‡¥¥‡¥ø‡¥ï‡µç‡¥ï‡µã‡¥ü‡µç": "Kozhikode",
  "‡¥µ‡¥Ø‡¥®‡¥æ‡¥ü‡µç": "Wayanad",
  "‡¥ï‡¥£‡µç‡¥£‡µÇ‡µº": "Kannur",
  "‡¥ï‡¥æ‡¥∏‡µº‡¥ï‡µã‡¥ü‡µç": "Kasaragod",
};

// Reverse mapping for display (English to Malayalam)
const districtDisplayMapping: Record<string, string> = {
  "Thiruvananthapuram": "‡¥§‡¥ø‡¥∞‡µÅ‡¥µ‡¥®‡¥®‡µç‡¥§‡¥™‡µÅ‡¥∞‡¥Ç",
  "Kollam": "‡¥ï‡µä‡¥≤‡µç‡¥≤‡¥Ç",
  "Pathanamthitta": "‡¥™‡¥§‡µç‡¥§‡¥®‡¥Ç‡¥§‡¥ø‡¥ü‡µç‡¥ü",
  "Alappuzha": "‡¥Ü‡¥≤‡¥™‡µç‡¥™‡µÅ‡¥¥",
  "Kottayam": "‡¥ï‡µã‡¥ü‡µç‡¥ü‡¥Ø‡¥Ç",
  "Idukki": "‡¥á‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥ø",
  "Ernakulam": "‡¥é‡¥±‡¥£‡¥æ‡¥ï‡µÅ‡¥≥‡¥Ç",
  "Thrissur": "‡¥§‡µÉ‡¥∂‡µç‡¥∂‡µÇ‡µº",
  "Palakkad": "‡¥™‡¥æ‡¥≤‡¥ï‡µç‡¥ï‡¥æ‡¥ü‡µç",
  "Malappuram": "‡¥Æ‡¥≤‡¥™‡µç‡¥™‡µÅ‡¥±‡¥Ç",
  "Kozhikode": "‡¥ï‡µã‡¥¥‡¥ø‡¥ï‡µç‡¥ï‡µã‡¥ü‡µç",
  "Wayanad": "‡¥µ‡¥Ø‡¥®‡¥æ‡¥ü‡µç",
  "Kannur": "‡¥ï‡¥£‡µç‡¥£‡µÇ‡µº",
  "Kasaragod": "‡¥ï‡¥æ‡¥∏‡µº‡¥ï‡µã‡¥ü‡µç",
};

const FarmProfileForm = () => {
  // Get global profile state and functions from the Auth context
  const { profile, profileLoading, refetchProfile, user } = useAuth();
  const { toast } = useToast();
  const { language, t } = useLanguage();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  
  // Helper function to parse and display location
  const parseLocationDisplay = (location: string | null): string => {
    if (!location) return "Not provided";
    
    // Check if location already has readable format
    if (location.includes('(') && location.includes(')')) {
      return location; // Already formatted with address + coordinates
    }
    
    // Check if it's just coordinates (lat, lon format)
    const coordsMatch = location.match(/^([+-]?\d*\.?\d+),\s*([+-]?\d*\.?\d+)$/);
    if (coordsMatch) {
      const [, lat, lon] = coordsMatch;
      return `${parseFloat(lat).toFixed(4)}, ${parseFloat(lon).toFixed(4)}`;
    }
    
    return location; // Return as-is if it's already a readable format
  };

  // Local form state, initialized from the global profile
  const [formData, setFormData] = useState({
    full_name: "",
    location: "",
    district: "",
    farm_size: "",
    soil_type: "", // Re-add soil_type
  });

  useEffect(() => {
    // When the global profile data loads, update the local form state
    console.log("üîç Profile data received:", profile);
    if (profile) {
      console.log("üìù Setting form data from profile:", {
        full_name: profile.full_name,
        location: profile.location,
        farm_size: profile.farm_size,
        soil_type: profile.soil_type
      });
      setFormData({
        full_name: profile.full_name || "",
        location: profile.location || "",
        district: profile.district || "",
        farm_size: profile.farm_size?.toString() || "",
        soil_type: profile.soil_type || "", // Re-add soil_type
      });
    }
  }, [profile]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target;
    setFormData((prev) => ({ ...prev, [id]: value }));
  };

  const handleSoilTypeChange = (value: string) => {
    setFormData((prev) => ({ ...prev, soil_type: value }));
  };

  const handleDistrictChange = (value: string) => {
    setFormData((prev) => ({ ...prev, district: value }));
  };

  const reverseGeocode = async (lat: number, lon: number): Promise<string> => {
    try {
      // Using OpenStreetMap Nominatim API (free, no API key required)
      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&addressdetails=1`
      );
      
      if (response.ok) {
        const data = await response.json();
        const address = data.address;
        
        // Build a readable address from components
        const parts = [];
        if (address.village) parts.push(address.village);
        else if (address.town) parts.push(address.town);
        else if (address.city) parts.push(address.city);
        
        if (address.state_district && !parts.includes(address.state_district)) {
          parts.push(address.state_district);
        }
        if (address.state) parts.push(address.state);
        if (address.country) parts.push(address.country);
        
        const readableAddress = parts.join(', ');
        return readableAddress || `${lat.toFixed(4)}, ${lon.toFixed(4)}`;
      }
    } catch (error) {
      console.error('Reverse geocoding failed:', error);
    }
    
    // Fallback to coordinates if geocoding fails
    return `${lat.toFixed(4)}, ${lon.toFixed(4)}`;
  };

  const handleLocationCapture = () => {
    if (!navigator.geolocation) {
      toast({ title: "Geolocation not supported", variant: "destructive" });
      return;
    }
    setIsSubmitting(true);
    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const { latitude, longitude } = position.coords;
        
        // Show coordinates immediately
        const coords = `${latitude}, ${longitude}`;
        setFormData((prev) => ({ ...prev, location: coords }));
        
        // Try to get readable address
        try {
          const readableAddress = await reverseGeocode(latitude, longitude);
          setFormData((prev) => ({ 
            ...prev, 
            location: `${readableAddress} (${latitude.toFixed(4)}, ${longitude.toFixed(4)})`
          }));
          toast({ title: "Location Captured!", description: readableAddress });
        } catch (error) {
          toast({ title: "Location Captured!", description: "Address lookup failed, using coordinates" });
        }
        
        setIsSubmitting(false);
      },
      () => {
        toast({ title: "Could not get location", variant: "destructive" });
        setIsSubmitting(false);
      }
    );
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    const submitData = {
      ...formData,
      farm_size: parseFloat(formData.farm_size) || null,
      // Always store English values in backend
      soil_type: soilTypeMapping[formData.soil_type] || formData.soil_type,
      district: districtMapping[formData.district] || formData.district,
    };
    
    console.log("üì§ Submitting profile data:", submitData);
    
    try {
      const response = await fetchWithAuth("/profile", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(submitData),
      });
      
      console.log("üì® Profile update response status:", response.status);

      if (!response.ok) throw new Error("Failed to update profile");

      toast({ title: "Success!", description: "Your profile has been updated." });
      // Refetch the global profile data to update the whole app
      refetchProfile();
      // Exit edit mode to show the updated profile
      setIsEditing(false);

    } catch (error) {
      if (error instanceof Error && !error.message.includes("Authentication error")) {
        console.error(error);
        toast({ title: "Error", description: "Could not update your profile.", variant: "destructive" });
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // Display a loading skeleton while the global profile is being fetched
  if (profileLoading) {
    return (
      <Card className="w-full max-w-md">
        <CardHeader>
          <Skeleton className="h-8 w-32" />
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-2">
            <Skeleton className="h-4 w-20" />
            <Skeleton className="h-10 w-full" />
          </div>
          <div className="space-y-2">
            <Skeleton className="h-4 w-20" />
            <Skeleton className="h-10 w-full" />
          </div>
          <div className="space-y-2">
            <Skeleton className="h-4 w-20" />
            <Skeleton className="h-10 w-full" />
          </div>
          <Skeleton className="h-10 w-full" />
        </CardContent>
      </Card>
    );
  }

  // Show profile view by default, edit form when editing
  if (!isEditing && profile) {
    return (
      <Card className="w-full max-w-2xl">
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              {t('profileTitle')} {language === 'ml' ? '‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ' : 'Information'}
            </CardTitle>
            <p className="text-sm text-muted-foreground mt-1">
              {t('welcomeProfile')}, {profile.username || user?.email}!
            </p>
          </div>
          <Button 
            onClick={() => setIsEditing(true)} 
            variant="outline" 
            size="sm"
            className="flex items-center gap-2"
          >
            <Edit className="h-4 w-4" />
            {language === 'ml' ? '‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡¥≤‡µç ‡¥é‡¥°‡¥ø‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï' : 'Edit Profile'}
          </Button>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <Label className="text-sm font-medium text-muted-foreground">{t('fullName')}</Label>
                <p className="text-lg font-medium">
                  {profile.full_name || (language === 'ml' ? '‡¥®‡µΩ‡¥ï‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡µç‡¥≤' : "Not provided")}
                </p>
              </div>
              
              <div>
                <Label className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                  <MapPin className="h-4 w-4" />
                  {t('location')}
                </Label>
                <p className="text-lg">
                  {parseLocationDisplay(profile.location)}
                </p>
                {profile.location && (
                  <p className="text-xs text-muted-foreground">
                    {language === 'ml' ? '‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•‡¥Ø‡µÅ‡¥Ç ‡¥™‡µç‡¥∞‡¥æ‡¥¶‡µá‡¥∂‡¥ø‡¥ï ‡¥â‡¥™‡¥¶‡µá‡¥∂‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µÅ‡¥≥‡µç‡¥≥ ‡¥ï‡µã‡¥ô‡µç‡¥ï‡µç‡¥∞‡¥ø‡¥ï‡µç‡¥∞‡µÄ‡µá‡¥∏‡µÅ‡¥ï‡µæ' : 'Coordinates for weather and regional advice'}
                  </p>
                )}
              </div>
              
              <div>
                <Label className="text-sm font-medium text-muted-foreground">
                  {language === 'ml' ? '‡¥ï‡µá‡¥∞‡¥≥ ‡¥ú‡¥ø‡¥≤‡µç‡¥≤' : 'Kerala District'}
                </Label>
                <p className="text-lg font-medium">
                  {profile.district 
                    ? (language === 'ml' ? districtDisplayMapping[profile.district] || profile.district : profile.district)
                    : (language === 'ml' ? '‡¥®‡µΩ‡¥ï‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡µç‡¥≤' : "Not provided")
                  }
                </p>
              </div>
            </div>
            
            <div className="space-y-4">
              <div>
                <Label className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                  <Ruler className="h-4 w-4" />
                  {t('farmSize')}
                </Label>
                <p className="text-lg font-medium">
                  {profile.farm_size 
                    ? `${profile.farm_size} ${language === 'ml' ? '‡¥è‡¥ï‡µç‡¥ï‡¥∞‡µç' : 'acres'}` 
                    : (language === 'ml' ? '‡¥®‡µΩ‡¥ï‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡µç‡¥≤' : "Not provided")
                  }
                </p>
              </div>
              
              <div>
                <Label className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                  <Layers className="h-4 w-4" />
                  {t('soilType')}
                </Label>
                <div className="mt-2">
                  {profile.soil_type ? (
                    <Badge variant="secondary" className="text-sm">
                      {language === 'ml' 
                        ? soilTypeDisplayMapping[profile.soil_type] || profile.soil_type 
                        : profile.soil_type
                      }
                    </Badge>
                  ) : (
                    <p className="text-lg">{language === 'ml' ? '‡¥®‡µΩ‡¥ï‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡µç‡¥≤' : "Not provided"}</p>
                  )}
                </div>
              </div>
            </div>
          </div>
          
          {(!profile.full_name || !profile.location || !profile.district || !profile.farm_size || !profile.soil_type) && (
            <div className="mt-6 p-4 bg-amber-50 border border-amber-200 rounded-lg">
              <p className="text-sm text-amber-800">
                üí° {language === 'ml' 
                  ? '‡¥µ‡µç‡¥Ø‡¥ï‡µç‡¥§‡¥ø‡¥ó‡¥§ ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥â‡¥™‡¥¶‡µá‡¥∂‡¥ô‡µç‡¥ô‡µæ‡¥Ø‡µÅ‡¥Ç ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•‡¥æ ‡¥Æ‡µÅ‡¥®‡µç‡¥®‡¥±‡¥ø‡¥Ø‡¥ø‡¥™‡µç‡¥™‡µÅ‡¥ï‡µæ‡¥Ø‡µÅ‡¥Ç ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡¥≤‡µç ‡¥™‡µÇ‡¥∞‡µç‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï!' 
                  : 'Complete your profile to get personalized farming advice and weather alerts!'
                }
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full max-w-2xl">
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle className="flex items-center gap-2">
          <Edit className="h-5 w-5" />
          {profile 
            ? (language === 'ml' ? '‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡¥≤‡µç ‡¥é‡¥°‡¥ø‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï' : "Edit Profile")
            : (language === 'ml' ? '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡¥≤‡µç ‡¥™‡µÇ‡¥∞‡µç‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï' : "Complete Your Profile")
          }
        </CardTitle>
        {profile && (
          <Button 
            onClick={() => setIsEditing(false)} 
            variant="outline" 
            size="sm"
            className="flex items-center gap-2"
          >
            <X className="h-4 w-4" />
            {language === 'ml' ? '‡¥±‡¥¶‡µç‡¥¶‡µÅ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï' : 'Cancel'}
          </Button>
        )}
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="full_name">{t('fullName')}</Label>
            <Input 
              id="full_name" 
              placeholder={language === 'ml' ? '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µÇ‡¥∞‡µç‡¥£‡µç‡¥£ ‡¥®‡¥æ‡¥Æ‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï' : "Enter your full name"} 
              value={formData.full_name} 
              onChange={handleChange} 
              disabled={isSubmitting} 
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="location">{t('location')}</Label>
            <div className="flex gap-2">
              <Input 
                id="location" 
                placeholder={language === 'ml' ? '‡¥Ö‡¥ï‡µç‡¥∑‡¥æ‡¥Ç‡¥∂, ‡¥∞‡µá‡¥ñ‡¥æ‡¥Ç‡¥∂' : "latitude, longitude"} 
                value={formData.location} 
                onChange={handleChange} 
                disabled={isSubmitting} 
              />
              <Button type="button" onClick={handleLocationCapture} disabled={isSubmitting}>
                {language === 'ml' ? '‡¥∏‡µç‡¥•‡¥≤‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡µÅ‡¥ï' : 'Get Location'}
              </Button>
            </div>
            <p className="text-xs text-muted-foreground">
              {language === 'ml' 
                ? '"‡¥∏‡µç‡¥•‡¥≤‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡µÅ‡¥ï" ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ï‡µã‡¥£‡¥æ‡¥á‡µª‡¥±‡µç‡¥±‡µç‡¥∏ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥∏‡µç‡¥µ‡¥Ø‡¥ô‡µç‡¥ï‡µç‡¥∞‡¥ø‡¥Ø‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥≠‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª.' 
                : 'Click "Get Location" to automatically fill your coordinates.'
              }
            </p>
          </div>
          <div className="space-y-2">
            <Label htmlFor="district">{language === 'ml' ? '‡¥ï‡µá‡¥∞‡¥≥ ‡¥ú‡¥ø‡¥≤‡µç‡¥≤' : 'Kerala District'}</Label>
            <Select value={formData.district} onValueChange={handleDistrictChange} disabled={isSubmitting}>
              <SelectTrigger>
                <SelectValue placeholder={language === 'ml' ? '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ú‡¥ø‡¥≤‡µç‡¥≤ ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï' : "Select your district"} />
              </SelectTrigger>
              <SelectContent>
                {keralaDistricts[language].map((district, index) => (
                  <SelectItem key={district} value={language === 'ml' ? district : keralaDistricts.en[index]}>
                    {district}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <p className="text-xs text-muted-foreground">
              {language === 'ml' 
                ? '‡¥™‡µç‡¥∞‡¥æ‡¥¶‡µá‡¥∂‡¥ø‡¥ï ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥â‡¥™‡¥¶‡µá‡¥∂‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ï‡µá‡¥∞‡¥≥ ‡¥ú‡¥ø‡¥≤‡µç‡¥≤ ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï.' 
                : 'Select your Kerala district for region-specific farming advice.'
              }
            </p>
          </div>
          <div className="space-y-2">
            <Label htmlFor="farm_size">{t('farmSize')}</Label>
            <Input 
              id="farm_size" 
              type="number" 
              placeholder={language === 'ml' ? '‡¥ï‡µÉ‡¥∑‡¥ø‡¥Ø‡¥ø‡¥ü‡¥§‡µç‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥µ‡¥≤‡µÅ‡¥™‡µç‡¥™‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï' : "Enter farm size"} 
              value={formData.farm_size} 
              onChange={handleChange} 
              disabled={isSubmitting} 
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="soil_type">{t('soilType')}</Label>
            <Select value={formData.soil_type} onValueChange={handleSoilTypeChange} disabled={isSubmitting}>
              <SelectTrigger>
                <SelectValue placeholder={language === 'ml' ? '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥§‡¥∞‡¥Ç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï' : "Select your soil type"} />
              </SelectTrigger>
              <SelectContent>
                {keralaSoilTypes[language].map((soil, index) => (
                  <SelectItem key={soil} value={language === 'ml' ? soil : keralaSoilTypes.en[index]}>
                    {soil}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <p className="text-xs text-muted-foreground">
              {language === 'ml' 
                ? '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ï‡µÉ‡¥∑‡¥ø‡¥Ø‡¥ø‡¥ü‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥á‡¥£‡¥ô‡µç‡¥ô‡µÅ‡¥®‡µç‡¥® ‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥§‡¥∞‡¥Ç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï.' 
                : 'Select the soil type that best matches your farm.'
              }
            </p>
          </div>
          <div className="flex gap-3">
            <Button type="submit" className="flex-1 flex items-center gap-2" disabled={isSubmitting}>
              <Save className="h-4 w-4" />
              {isSubmitting 
                ? (language === 'ml' ? '‡¥∏‡µá‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ...' : "Saving...") 
                : (language === 'ml' ? '‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡¥≤‡µç ‡¥∏‡µá‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï' : "Save Profile")
              }
            </Button>
            {profile && (
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setIsEditing(false)} 
                disabled={isSubmitting}
                className="flex items-center gap-2"
              >
                <X className="h-4 w-4" />
                {language === 'ml' ? '‡¥±‡¥¶‡µç‡¥¶‡µÅ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï' : 'Cancel'}
              </Button>
            )}
          </div>
        </form>
      </CardContent>
    </Card>
  );
};

export default FarmProfileForm;